[tool.poetry]
name = "caracara"
version = "0.3.0"
description = "The CrowdStrike Falcon Developer Toolkit"
authors = [ "CrowdStrike <falconpy@crowdstrike.com>" ]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.7"
py7zr = "^0.20"
crowdstrike-falconpy = "^1.2.15"

[tool.poetry.dev-dependencies]
bandit = "^1.7.5"
bullet = "^2.2.0"
coverage = "^7.1.0"
flake8 = "^5.0.4"
pydocstyle = "^6.3.0"
pylint = "^2.12.2"
pytest = "^7.2.1"
PyYAML = "^6.0"
toml = "^0.10.2"
tabulate = "^0.9.0"
click = "^8.1.3"
python-dateutil = "^2.8.2"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]


[tool.pylint.messages_control]
max-line-length = 100
disable = [
    # Disable duplicate-code as our policies modules will have lots of overlap, by design.
    # It is not really practical to try to appease this rule when creating an SDK wrapper.
    "duplicate-code",

    # Disable pointless-string-statement as per this GitHub thread / GVR's Tweet
    # https://github.com/PyCQA/pylint/issues/2864#issuecomment-642398573
    "pointless-string-statement",

    # Disable too-many-instance-attributes as we have some classes that are build
    # based on data returned by Falcon. It would be silly for us to refactor classes
    # representing these constructs just to pass this pylint rule. 
    "too-many-instance-attributes",

    # Disable R0904 (too-many-public-methods) as we have some modules, like hosts, which
    #Â by design have many functions exposed. As this is an SDK wrapper, we fully expect to
    # implement most of the functionality of the underlying SDK (FalconPy) and APIs
    # (from Falcon) by definition. Therefore, we have switched this rule off globally.
    "too-many-public-methods",

    # Disable pylint rule R0201 as we have functions that are decorated with decorators
    # that expect a self parameter. In these cases, the functions cannot be decorated
    # with @staticmethod.
    "R0201",
]


[tool.poetry.scripts]
# Hosts
agent-versions = "examples.hosts.show_agent_versions:show_agent_versions"
find-devices = "examples.hosts.find_devices:find_devices"
list-all-devices = "examples.hosts.list_all_devices:list_all_devices"
list-all-device-states = "examples.hosts.list_device_states:list_device_states"
list-all-groups = "examples.hosts.list_all_groups:list_all_groups"
list-all-group-members = "examples.hosts.list_all_group_members:list_all_group_members"
list-all-group-member-ids = "examples.hosts.list_all_group_member_ids:list_all_group_member_ids"
list-hidden-devices = "examples.hosts.list_hidden_devices:list_hidden_devices"
list-windows-devices = "examples.hosts.list_windows_devices:list_windows_devices"
list-device-logins = "examples.hosts.list_login_history:list_login_history"
list-device-address-changes = "examples.hosts.list_network_history:list_network_history"
stale-sensors = "examples.hosts.find_stale_sensors:find_stale_sensors"
# Prevention Policies
create-prevention-policy = "examples.prevention_policies.create_prevention_policy:create_prevention_policy"
describe-prevention-policies = "examples.prevention_policies.describe_prevention_policies:describe_prevention_policies"
# Response Policies
create-response-policy = "examples.response_policies.create_response_policy:create_response_policy"
describe-response-policies = "examples.response_policies.describe_response_policies:describe_response_policies"
# RTR
clear-queued-sessions = "examples.rtr.clear_queued_sessions:clear_queued_sessions"
describe-put-files = "examples.rtr.describe_put_files:describe_put_files"
describe-queued-sessions = "examples.rtr.describe_queued_sessions:describe_queued_sessions"
describe-scripts = "examples.rtr.describe_scripts:describe_scripts"
download-event-log = "examples.rtr.download_event_log:download_event_log"
queue-command = "examples.rtr.queue_command:queue_command"
# Users
describe-roles = "examples.users.describe_roles:describe_roles"
describe-users = "examples.users.describe_users:describe_users"
